{
    "contents" : "library(glmnet)\nlibrary(barchart)\n\nshinyServer(function(input, output, session) {\n\n  #observe({\n   # if (is.null(input$js)) {\n    #  shinyjs::show(\"uifile\")\n     # shinyjs::show(\"uisubmit\")\n    #}\n  #})\n\n  ###########################\n  ### Input and Read Data Set\n\n  dataset = reactive({\n\n    # Create a new variable to refer the input file\n    infile = input$file\n\n    if (is.null(infile)) {\n      return(NULL)\n    } else {\n      return(read.csv(infile$datapath)) # read a file in csv format\n    }\n\n  }) # end of dataset\n\n  ################\n  ### Input Method\n  # If a data set is uploaded, we show the choices of method section.\n  # Users can choose either from Regression or Network options.\n  # If no data set is uploaded, we return nothing.\n\n  output$method.selection = renderUI({\n\n    if (is.null(dataset())) {\n      return(NULL)\n    } else {\n\n      ##################\n      ### Method Choices\n      # Type: radio button\n      # ID: method\n      # Label: Choose a method\n      # Choices: LassoCV, LassoAV, Method 1, Method 2\n      selectInput(inputId = \"method\",\n                  label = \"Choose a method\",\n                  choices = c(\"Regression (AV)\", \"Regression (CV)\",\n                              \"Network (FOS)\"),\n                  selected = \"Network (FOS)\")\n\n    } # end of else statement\n  }) # end of method selection\n\n  ###########################\n  ### Input Response Variable\n  # If a data set is uploaded, we show the choices of the response variable.\n  # If users choose regression methods, we will show a list of variables they can\n  # select for the response variable.\n  # If users choose network methods, we will show a list of variables they can\n  # select for the excluded variable.\n\n  output$y = renderUI({\n\n    if (is.null(dataset())) {\n\n      return(NULL)\n\n    } else if (!is.null(input$method) &&\n               (input$method == 'Regression (AV)' ||\n                input$method == 'Regression (CV)' ||\n                input$method == 'Network (FOS)')) {\n\n      ##################################\n      ### Response Variable Select Input\n      # Type: select input\n      # ID: responseV\n      # Label: Choose a response variable\n      # Choices: \"First column\", \"Last column\", and all the columns in the input\n      #          data set\n      # Note: only one choice can be selected as a response varaible\n      #       (multiple = FALSE)\n\n      selectInput(\"responseV\", \"Choose a response variable:\",\n                  choices  = list(\"First column\",\"Last column\",\n                                  Columns = c(names(dataset()))),\n                  multiple = FALSE)\n\n    } else if (!is.null(input$method) &&\n               (input$method == 'Network (FOS)')) {\n\n      #######################\n      ### Variable to Neglect\n      # Type: select input\n      # ID: excludeV\n      # Label: Exclude a variable\n      # Choices: \"None\", \"First column\", \"Last column\",\n      #          and all the columns in the input data set\n      # Note: only one choice can be selected as the varaible to neglect\n\n      selectInput(\"excludedV\", \"Exclude a variable:\",\n                  choices = list(\"None\", \"First column\",\"Last column\",\n                                 Columns = c(names(dataset()))),\n                  multiple = FALSE)\n\n    }\n  }) # end of response variables selection\n\n  ############################\n  ### Store Response Variable\n  # We match the choices from selectInput to the related columns in the data set\n  # This reactive returns a data frame of the selected variable\n  # becasue we let the argument \"drop=FALSE\"\n  # If \"drop=TRUE\", it returns values of the selected variable\n\n  yinput = reactive({\n\n    if (is.null(input$responseV) || is.na(input$responseV)) {\n      return()\n    } else if (input$responseV == \"First column\"){\n      dataset()[, 1,drop = FALSE]\n    } else if (input$responseV == \"Last column\"){\n      dataset()[, ncol(dataset()), drop = FALSE]\n    } else {\n      dataset()[, input$responseV, drop = FALSE]\n    }\n\n  })\n\n  ############################\n  ### Store Predictor Variable\n  # x is all the columns of the data set except the response variable column.\n\n  xinput = reactive({\n    dataset()[, names(dataset()) != names(yinput())]\n  })\n\n  ##############################################\n  ### Store Variables Included for Network Method\n  # We match the choices from selectInput to the related columns in the data set\n  # This reactive returns values of all variables in the data set\n  # except the selected one.\n\n  variables.included = reactive({\n\n    if(is.null(input$excludedV) || is.na(input$excludedV)) {\n      return()\n    } else if(input$excludedV == \"None\") {\n      dataset()[, names(dataset())]\n    } else if(input$excludedV == \"First column\") {\n      dataset()[,-1]\n    } else if(input$excludedV == \"Last column\") {\n      dataset()[,-ncol(dataset())]\n    } else {\n      dataset()[, names(dataset()) != input$excludedV]\n    }\n\n  })\n\n  ##########\n  ### Output\n  # The output is active only when the inputs are submitted\n  # and it will be updated when another submission is performed\n\n  avfosobject = eventReactive(input$run, {\n    #source('~/Documents/project/coefficients.R')\n    source('coefficients.R')\n    if (is.null(dataset())) {\n      NULL\n    } else {\n      coefficients(xinput(), yinput(), input$method)\n    }\n    #avfosobject = coefficients(xinput(), yinput(), input$method)\n  })\n\n  output$currentTime <- renderText({\n    invalidateLater(1000, session)\n    paste(\"The current time is\", Sys.time())\n  })\n\n  #output$coefficients <- renderPlot({\n    #if (is.null(avfosobject)) {\n      #barplot(height = rnorm(100),\n      #        horiz = TRUE,\n      #        main = \"No data selected\",\n      #        xlab = \"null\",\n      #        ylab = \"null\")\n      #hist(x=rnorm(100))\n    #} else {\n    #if (!is.null(avfosobject)) {\n    #  avfosfit = avfosobject()$betas[,input$lambdaIndex]\n      #avfosfit = avfosobject()$coefficients\n    #  index = which(avfosfit != 0)\n      # combine the non-zero coefficients and their index by column\n    #  nonzeroco = avfosfit[index]\n    #  barplot(height = nonzeroco,\n              #names.arg = index,\n    #          horiz = TRUE,\n    #          col = c(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"),\n    #          main = paste0(\"Non-zero coefficients at path \", input$lambdaIndex, \" for \", input$method),\n    #          xlab = \"Coefficient\",\n    #          ylab = \"Index/Name\",\n    #          xlim = c(max(nonzeroco), min(nonzeroco))\n    #          #ylim = c(sum(avfosfit != 0), 0),\n    #          #xpd = FALSE\n    #  )\n    #}\n  #})\n\n  output$coefficients <- renderBarchart({\n    if (!is.null(avfosobject)) {\n      #avfosfit = avfosobject()$betas[,input$lambdaIndex]\n      #avfosfit = avfosobject()$coefficients\n      #index = which(avfosfit != 0)\n      # combine the non-zero coefficients and their index by column\n      #nonzeroco = avfosfit[index]\n      parameters <- coef(avfosobject())\n      #parameters <- coef(fit)\n      index               = which(parameters[, 1] != 0)\n      nonzeroco <- parameters[index]\n      nonzeroco <- data.frame(nonzeroco)\n      rownames(nonzeroco) = rownames(parameters)[index]\n      #browser()\n      return(barchart(nonzeroco))\n    }\n  })\n\n  output$table <- renderDataTable({\n    if (!is.null(avfosobject)) {\n      avfosfit = avfosobject()$betas[,input$lambdaIndex]\n      #avfosfit = avfosobject()$coefficients\n      index = which(avfosfit != 0)\n      # combine the non-zero coefficients and their index by column\n      nonzeroco = avfosfit[index]\n      return(nonzeroco)\n    }\n  })\n})\n",
    "created" : 1478380969555.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "431089825",
    "id" : "2654C46C",
    "lastKnownWriteTime" : 1478632557,
    "path" : "~/Documents/project/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}