{
    "contents" : "library(glmnet)\n\n# extract the design matrix x and outcome y\ndataset <- read.csv(file=\"~/Documents/testAV/riboflavin_t.csv\", header=TRUE, sep=\",\")\nyinput <- dataset[, 1,drop = FALSE]\ny <- yinput[, 1] # extract values from the data frame\nx <- as.matrix(dataset[, names(dataset) != names(yinput)])\n\n#for (i in 1:ncol(x)) {\n#    x[,i] = (x[,i] - mean(x[,i])) / std(x[,i])\n#}\n\ntic()\n\n# find the AV fit to the dataset\nC <- 0.75\nlambdaMax <- 2 * max(abs(t(x) %*% y)) / length(y)\nlambdas <- lambdaMax / (1.3 ^ seq(0,99))\nfit <- glmnet(x, y, lambda=lambdas, intercept=FALSE)\nj <- 1\nt <- 1\nwhile (t > 0 && j < 100) {\n  j <- j + 1\n  betaj <- fit$beta[,j]\n  lambdaj <- lambdas[j]\n  for (k in 1:(j - 1)) {\n    betak <- fit$beta[,k]\n    lambdak <- lambdas[k]\n    t <- t * (max(abs(betaj - betak)) / (lambdaj + lambdak) <= C)\n  }\n}\n\ntoc()\n\navfit <- glmnet(x, y, lambda=lambdaj, intercept=FALSE)\n#avfit <- glmnet(x, y, lambda=lambdaj)\n#fit$a0 = fit$a0[j]\n#fit$beta = betaj\n#fit$df = fit$df[j]\n#fit$dim = c(length(betaj), 1)\n#fit$lambda = lambdaj\n#fit$dev.ratio = fit$dev.ratio[j]\n#fit$call = 'glmnet(x = x, y = y, lambda = lambdaj)'\n\n# apply variable selection to the AV fit\n#avfit$beta = avfit$beta * (abs(avfit$beta) >= 3 * C * avfit$lambda)\n\n# get the AV fit's beta into a form usable in calculations\nBETA <- c(avfit$a0, avfit$beta[1:length(avfit$beta)])\n\n# find the predicted outcome based on beta\nPREDICTED <- c(1, x[1,]) %*% BETA #sum(c(1, x[1,]) * BETA)\nfor (i in 2:length(y)) {\n  PREDICTED <- c(PREDICTED, c(1, x[i,]) %*% BETA)\n}\n\n# plot the actual and predicted outcomes\n#plot(y, type=\"o\", col=\"blue\", ylim=c(min(y), max(y)))\n#lines(PREDICTED, type=\"o\", pch=22, lty=2, col=\"red\")\n#legend(1, max(y), c(\"actual\",\"predicted\"), cex=0.8, col=c(\"blue\",\"red\"), pch=21:22, lty=1:2)\n\n# plot the coefficients\nparameters <- coef(avfit)\n#parameters <- coef(fit)\nindex               = which(parameters[, 1] != 0)\n# combine the non-zero coefficients and their index by column\nnonzeroco           = cbind(index, parameters[index])\n# label the index and coefficients\ncolnames(nonzeroco) = c(\"Index\", \"Coefficients\")\ndf                  = data.frame(nonzeroco) # create a data frame\ncoefnames = paste(rownames(df), \"  \",\n                  df$Index, \"    \",\n                  format(round(df$Coefficients, 3), nsmall <- 3))\nif (nrow(df) <= 10) {\n  labelsize <- 1\n} else if (nrow(df) <= 30) {\n  labelsize <- 0.9\n} else {\n  labelsize <- 0.8\n}\npar(mar = c(5,15,8,6))\nbarplot(height    = rev(df$Coefficients), # values of the bars\n        # rev() is to set the bars in a top-down order\n        names     = rev(coefnames), # names of the bars\n        col       = rainbow(20), # color of the bars: rainbow with 20 colors\n        horiz     = T, # the bars are drawn horizontally\n        las       = 1, # the axis labels are horizontal\n        cex.names = labelsize, # expansion factor for the bar labels' size\n        # x-axis center at 0\n        xlim      = c(-max(abs(df$Coefficient)),max(abs(df$Coefficient))), \n        main      = \"None-zero Coefficient Distribution\", # title of the chart\n        axes      = FALSE) # a horizontal (if horiz is true) axis is drawn \naxis(side = 3) # Axis on top of the chart bar\nmtext(\"Coefficient magnitude\", side=3, line=2) # Add the axis label to top\n\n# trying to compute 2 * max(abs(t(x) * (y - x * beta)))\n# BETA = beta (including intercept)\n# PREDICTED = x * beta\n#XMATRIX <- matrix(x[1:290248], nrow=71, ncol=4088)",
    "created" : 1478631410378.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "223100808",
    "id" : "80E935D6",
    "lastKnownWriteTime" : 1466628024,
    "path" : "~/Documents/testAV/AVplayground.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}